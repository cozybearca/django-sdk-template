"""
Django settings

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
from pathlib import Path

from django.utils.translation import gettext_lazy

from src.logging import configure_logging

BASE_DIR = Path(os.environ["SITE_ROOT"])
MIGRATION_DIR = Path(os.environ["MIGRATION_DIR"])

# This is the actual migration module, not the one in tmp

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "n9mz!6ybb*q=yrznr92x44lwk1t0@b%f08s55lmq@xo#@3co*c"


def env_flag(key):
    return os.environ.get(key, "0") == "1"


ENV_FLAGS = [
    "PLACEHOLDER",
    "ENABLE_DEV_APP",
    "DEBUG",
    "MOCK_SMS_API",
    "MOCK_SCALESERP_API",
    "MOCK_EMAIL_API",
    "MOCK_APN_API",
    "ENABLE_DJANGO_TOOLBAR",
    "ENABLE_DJANGO_SILK",
    "DISABLE_GOOGLE_LOGIN",
    "DISABLE_CACHE",
    "DISABLE_DEV_UTILS",
    "DEBUG_PROPAGATE_EXCEPTIONS",
]

globals().update({key: env_flag(key) for key in ENV_FLAGS})

# Never set these outside the live production
LIVE_APN_API = False
LIVE_STRIPE_API = False

if TUNE_LIVE := env_flag("TUNE_LIVE"):
    PLACEHOLDER = False
    ENABLE_DEV_APP = False
    DEBUG = False
    MOCK_SMS_API = False
    MOCK_EMAIL_API = False
    MOCK_APN_API = False
    MOCK_SCALESERP_API = False
    LIVE_APN_API = True
    LIVE_STRIPE_API = True
    ENABLE_DJANGO_TOOLBAR = False
    ENABLE_DJANGO_SILK = False
    DISABLE_GOOGLE_LOGIN = False
    DISABLE_CACHE = False
    DISABLE_DEV_UTILS = True
    DEBUG_PROPAGATE_EXCEPTIONS = False

if TUNE_TEST := env_flag("TUNE_TEST"):
    PLACEHOLDER = False
    ENABLE_DEV_APP = False
    DEBUG = False
    MOCK_SMS_API = True
    MOCK_APN_API = True
    MOCK_EMAIL_API = True
    MOCK_SCALESERP_API = True
    LIVE_APN_API = False
    LIVE_STRIPE_API = False
    ENABLE_DJANGO_TOOLBAR = False
    ENABLE_DJANGO_SILK = False
    DISABLE_GOOGLE_LOGIN = True
    DISABLE_CACHE = False
    DISABLE_DEV_UTILS = False
    DEBUG_PROPAGATE_EXCEPTIONS = True


ALLOWED_HOSTS = (
    [
        "*",
    ]
    if DEBUG
    else []
)


# Application definition
SITE_APPS = [
    "src.common.app.CommonApp",
]
AUTH_USER_MODEL = "common.User"
INSTALLED_APPS = [
    "django_client_framework.apps.DefaultApp",
    # https://django-extensions.readthedocs.io/en/latest/index.html
    "django_extensions",
    "django.contrib.auth",
    # https://docs.djangoproject.com/en/3.0/ref/contrib/contenttypes
    "django.contrib.contenttypes",
    # https://docs.djangoproject.com/en/3.0/topics/http/sessions/
    "django.contrib.sessions",
    # https://docs.djangoproject.com/en/3.0/ref/contrib/messages/
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # https://www.django-rest-framework.org/
    "rest_framework",
    # https://django-guardian.readthedocs.io/en/stable/configuration.html
    "guardian",
    # https://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication
    "rest_framework.authtoken",
    # https://github.com/henriquebastos/django-test-without-migrations/
    "test_without_migrations",
    # "django_celery_results",
] + SITE_APPS

MIGRATION_MODULES = {"common": "migrations.common"}

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}

MIDDLEWARE = [
    "django_currentuser.middleware.ThreadLocalUserMiddleware",  # https://pypi.org/project/django-currentuser/
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


# https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-LOGIN_URL
LOGIN_URL = "/"

ROOT_URLCONF = "src.urls"

DEFAULT_FILE_STORAGE = "src.common.db_file_storage.DatabaseFileStorage"

STATIC_URL = "/static/"
STATIC_ROOT = Path(os.environ["COLLECT_STATIC_DIR"])
STATICFILES_DIRS = [
    BASE_DIR / "src" / "web" / "static",
]

MEDIA_DIR = "/dev/null"

LOCALE_PATHS = [BASE_DIR / "locale"]

TEMPLATE_LIBS = {}
for path in BASE_DIR.glob("src/web/**/tags/*.py"):
    if path.stem != "__init__":
        TEMPLATE_LIBS[path.stem] = str(
            path.relative_to(BASE_DIR).with_suffix("")
        ).replace("/", ".")

TEMPLATE_DIRS = [
    BASE_DIR / "src" / "web",
]
for path in BASE_DIR.glob("src/web/**/tags"):
    TEMPLATE_DIRS.append(path)

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": TEMPLATE_DIRS,
        "APP_DIRS": True,
        "OPTIONS": {
            # https://docs.djangoproject.com/en/3.0/ref/templates/api/#subclassing-context-requestcontext
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "libraries": TEMPLATE_LIBS,
        },
    },
]

WSGI_APPLICATION = "wsgi.application"

# https://docs.djangoproject.com/en/3.0/topics/auth/customizing/#authentication-backends
AUTHENTICATION_BACKENDS = (
    "guardian.backends.ObjectPermissionBackend",
    "django.contrib.auth.backends.ModelBackend",
)

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "site",
        "USER": "postgres",
        "PASSWORD": "postgres",
        "HOST": "pgpool",
        "PORT": "5432",
        "ATOMIC_REQUESTS": True,
        "CONN_MAX_AGE": 0,
        "TEST": {
            "NAME": os.environ.get("TEST_DB", "test"),
        },
    }
}

LANGUAGES = [
    ("en", gettext_lazy("English")),
    ("zh-cn", gettext_lazy("Chinese")),
]

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "zh-cn"
TIME_ZONE = "America/Toronto"
USE_I18N = False
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATICFILES_FINDERS = [
    "src.staticfinder.StaticRootFinder",
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # other finders..
]

LOGGING_CONFIG = None  # disable default config

LOGGING = configure_logging()

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST = "email-smtp.ca-central-1.amazonaws.com"
EMAIL_HOST_USER = "AKIARQGC433WCUY2Z4GB"
EMAIL_HOST_PASSWORD = "BGWnBluXKqlXQWi3p80+0q32P3yNNBMWk2ZYUQq01O88"


if ENABLE_DJANGO_SILK:
    INSTALLED_APPS += ["silk"]
    MIDDLEWARE = ["silk.middleware.SilkyMiddleware"] + MIDDLEWARE
    global SILKY_META
    SILKY_META = False
    global SILKY_PYTHON_PROFILER
    SILKY_PYTHON_PROFILER = True
    global SILKY_PYTHON_PROFILER_BINARY
    SILKY_PYTHON_PROFILER_BINARY = True
    global SILKY_DYNAMIC_PROFILING
    SILKY_DYNAMIC_PROFILING = []

if DISABLE_CACHE:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "site_cache",
        }
    }

# CELERY_RESULT_BACKEND = "django-db"
# CELERY_CACHE_BACKEND = "django-cache"
